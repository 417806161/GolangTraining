// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package cul

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// CulClient is the client API for Cul service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CulClient interface {
	CulInt(ctx context.Context, in *CulRequest, opts ...grpc.CallOption) (*CulReply, error)
}

type culClient struct {
	cc grpc.ClientConnInterface
}

func NewCulClient(cc grpc.ClientConnInterface) CulClient {
	return &culClient{cc}
}

func (c *culClient) CulInt(ctx context.Context, in *CulRequest, opts ...grpc.CallOption) (*CulReply, error) {
	out := new(CulReply)
	err := c.cc.Invoke(ctx, "/cul.Cul/CulInt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CulServer is the server API for Cul service.
// All implementations must embed UnimplementedCulServer
// for forward compatibility
type CulServer interface {
	CulInt(context.Context, *CulRequest) (*CulReply, error)
	mustEmbedUnimplementedCulServer()
}

// UnimplementedCulServer must be embedded to have forward compatible implementations.
type UnimplementedCulServer struct {
}

func (*UnimplementedCulServer) CulInt(context.Context, *CulRequest) (*CulReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CulInt not implemented")
}
func (*UnimplementedCulServer) mustEmbedUnimplementedCulServer() {}

func RegisterCulServer(s *grpc.Server, srv CulServer) {
	s.RegisterService(&_Cul_serviceDesc, srv)
}

func _Cul_CulInt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CulRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CulServer).CulInt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cul.Cul/CulInt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CulServer).CulInt(ctx, req.(*CulRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Cul_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cul.Cul",
	HandlerType: (*CulServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CulInt",
			Handler:    _Cul_CulInt_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cul.proto",
}
